#!/usr/bin/perl

# Copyright (C) 2005 Eric Richardson (sark) <e@ericrichardson.com>
#   This string:
#      eScripting: push(@the_masses, $eWorld->GPL_tools); http://escripting.com
#
#  Found at: http://web.archive.org/web/20070515075025/www.escripting.com/podcast/
#
#  Seems to indicate that Eric's copyrights are licensed GPLv2-or-later.
#  I have emailed Eric for clarification as well.
#
# Copyright (C) 2006, 2007, 2008, 2009, 2010 Bradley M. Kuhn <bkuhn@ebb.org>
#
#   This software's license gives you freedom; you can copy, convey,
#   propagate, redistribute and/or modify this program under the terms of
#   the GNU General Public License (GPL) as published by the Free Software
#   Foundation (FSF), either version 3 of the License, or (at your option)
#   any later version of the AGPL published by the FSF.
#
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Affero General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program in a file in the toplevel directory called
#   "GPLv3".  If not, see <http://www.gnu.org/licenses/>.


my $OGG_QUALITY = 5;
#use XML::RAI;
use XML::DOM;
use XML::Simple;

use URI::Fetch;

use Cache::File;

use DateTime;
use DateTime::Format::HTTP;

#use MP3::Mplib;

use Storable;

use strict;
use vars qw( $cfg $config $args $parser $cache );

$cfg = {
	config	=> "/home/bkuhn/Files/Audio/Programs/podcast/config",
};

#----------
open(DOWNLOAD_LIST, ">>downloaded.list") or die "unable to open downloadedlist: $!";
open(NEW_LIST, ">>new.m3u") or die "unable to open new.m3u: $!";
{
	$parser = new XML::DOM::Parser;
#	$parser = new XML::RSS::Parser;

	# -- open our config file -- #
	
	$config = XML::Simple::XMLin($cfg->{config});

	# -- open our cache -- #
	
	$cache = Cache::File->new( cache_root => $config->{cache} );
	
	# -- run through our feeds -- #
	while ( my ($n,$f) = each %{ $config->{feed} } ) {
		next if ( $f->{disabled} );
                my $subdir = $config->{local} . '/' . $f->{subdir};
                mkdir($subdir) unless -d $subdir;
		
		warn "feed name: $n\n";
                print "URL $f->{url}\n";
		my $rss = URI::Fetch->fetch( $f->{url} , 
			(Cache	=> $cache)
		 ) or die URI::Fetch->errstr();

		if ( $rss->status == URI::Fetch::URI_OK() ) {
			# go on to main handling
			my $items = &parse_feed( $f , $rss );
			&handle_items( $f , $items );
		} elsif ( $rss->status == URI::Fetch::URI_NOT_MODIFIED() ) {
			# do nothing
		} elsif ( $rss->status == URI::Fetch::URI_MOVED_PERMANENTLY() ) {
			# we need to update the config file
			warn "\n\nMOVING RSS URL FOR $n\nURI: ".$rss->uri."\n";
			$f->{oldurl} = $f->{url};
			$f->{url} = $rss->uri;
		} elsif ( $rss->status == URI::Fetch::URI_GONE() ) {
			# we'll disable it in the config file, but leave it in there
			$f->{ disabled } = 1;
		} else {
			die "odd status code: $rss->status\n";
		}
	}
}

#----------

sub parse_feed {
	my ($f,$rss) = @_;

	my $content = $rss->content;

	my $xml = $parser->parse($rss->content,ProtocolEncoding=>"ISO-8859-1");

	# -- parse through items in the feed -- #

	my $items = [];

	foreach my $item ( $xml->getElementsByTagName('item') ) {
		# -- first we'll make a hash with title/desc/etc -- #
		my $info = {};
		foreach my $c ( $item->getChildNodes ) {
			next if ($c->getNodeName !~ /
				^(
					title
					| link
					| description
					| pubdate
					| dc:date
					| dcterms:created
				)
			/ix);

			my $name = $1;
			my $text;
                        eval {
                            $text = $c->getFirstChild->getData;
                        };
                        if ($@) {
                            if ($name eq "description") {
                                $text = "Empty Description!";
                            } else {
                                die "Unable to find contents in $name: $@"
                            }
                        }
			# clean it up a bit
			$text =~ s!(?:^\s+|\s+$)!!g;

			$info->{ lc($name) } = $text;
		}

		# -- now handle some preferred fields -- #

		foreach my $a (
			['created','dcterms:created','dc:date','pubdate']
		) {
			my $f = shift @$a;
			foreach my $p (@$a) {
				next if (!$info->{$p});
				$info->{$f} = $info->{$p};
				last;
			}
		}

		# -- now handle the enclosure -- #
		{
			my $elist = $item->getElementsByTagName('enclosure');

			# this list should only have one member
			warn "item has more than one enclosure?\n" 
				if ($elist->getLength > 1);

			my $enc = $elist->item(0);

			if ($enc) {
				my $ei = $info->{enclosure} = {};

				my $attributes = $enc->getAttributes;
				if ($attributes) {
					for my $i ( 0 .. $attributes->getLength-1 ) {
						my $attr = $attributes->item($i);
						$ei->{ lc($attr->getName) } = $attr->getValue;
					}
				}
			} else {
				# boo...  item has no audio
			}
		}

		push @$items , $info;
	}

	return $items;
}

#----------

sub handle_items {
	my ($f,$items) = @_;

	# -- find out what files we already know about -- #

	my $known;
	if ( my $blob = $cache->get( "known_files." . $f->{url} ) ) {
		$known = Storable::thaw( $blob );
	} else {
		$known = [];
	}

	# -- get new files -- #

	my $current = [];

	# we assume that the podcast feed is always going to have our newest 
	# file(s), so we start there with the idea that if we don't reach our 
	# count we'll keep around a couple we already know

	{
		my $c = 0;
		foreach my $i (@$items) {
                        $i->{created} =~ s/\s+EDT\s*$/ -0400/;
                        $i->{created} =~ s/\s+EST\s*$/ -0500/;
                        $i->{created} =~
                  s/^\s*([SMTWF][a-z][a-z]\s*,)\s+(\w{3,3})\s+(\d+)/$1 $3 $2/;
                        $i->{created} =~
                  s/^\s*([SMTWF][a-z][a-z]\s*,)\s+(\w{3,3})\s+(\d+)/$1 $3 $2/;
                        my $date;
                        use Date::Manip;
                        $date = ParseDate($i->{created});
                        if (not defined $date or $date =~ /^\s*$/) {
                          $i->{created} =~ s/^((Sun|Mon|Tue|Wed|Thu|Fri|Sat)([A-Za-z]*\s*,?)?\s+)(\d+)/$4/;
                          $i->{created} =~ s/(CDT|EDT)\s*$//;
                          $date = ParseDate($i->{created});
                        }
                        if (not defined $date or $date =~ /^\s*$/) {
                          $date = ParseDate($i->{pubdate});
                        }
                        if (not defined $date or $date =~ /^\s*$/) {
                          $i->{pubdate} =~ s/^((Sun|Mon|Tue|Wed|Thu|Fri|Sat)([A-Za-z]*\s*,?)?\s+)(\d+)/$4/;
                          $i->{pubdate} =~ s/(CDT|EDT)\s*$//;
                          $date = ParseDate($i->{pubdate});
                        }
                        if (not defined $date or $date =~ /^\s*$/) {
                          $date = ParseDate('today');
                        }
                        $date = DateTime::Format::HTTP->parse_datetime(UnixDate($date, "%a, %d %b %Y %T %z"));
			print "date is now: " . $date->strftime("%Y/%m/%d") . "\n";

			if ($i->{enclosure} && $c < $f->{count}) {
				if ( &download_audio($f,$i,$date) ) {
					warn "onto current: " . &local_file_from_url($i) . "\n";
					push @$current, [ $date->epoch , &local_file_from_url($i) ];
					$c++;
				} else {
					# nothing
				}
			} else {
				# no audio or we've reached our limit	
			}
		}
                # sort them by date
		# map curent files to filenames
		my $files = {};
		%$files = map { $_->[1] => 1 }  @$current;

		# -- fill in missing current files -- #

		if ($c < $f->{count}) {
			foreach my $k (@$known) {
				next if ($files->{ $k->[1] });
				warn "adding $k->[1] to current\n";
				push @$current, $k;
				$c++;
				last unless ($c < $f->{count});
			}
		}

		# (refresh) map curent files to filenames
		%$files = map { $_->[1] => 1 } @$current;

		# -- delete old known files -- #

		foreach my $k (@$known) {
			# skip it if the file name's in current
			next if ($files->{ $k->[1] });

			my $lfile = $config->{local} . "/" . $f->{subdir} . '/' .
                          $k->[1];
			# if it's not, out it goes
			warn "deleting $lfile\n";
                        unlink($lfile) or warn "Unable to delete $lfile: $!";
			#`rm $lfile`;
		}
	}
	# -- store a list of what we know -- #

	$cache->set( "known_files." . $f->{url} , Storable::nfreeze( $current ) );
	
	return 1;
}

#----------

sub buildFileNames {
  my ($file, $f, $date) = @_;
  my $androidFile = $file;
  $androidFile =~ s%^.+/([^/]+)%$1%;
  $androidFile = $date . "_" . $f->{subdir} ."_". $androidFile;
  my $newFileName = $config->{local} . "/" . $f->{subdir} . '/' . $androidFile;
#  $newFileName .= "_" . $info{TRACKNUMBER} if defined $info{TRACKNUMBER};
  return ($androidFile, $newFileName);
}

sub download_audio {
  my ($f,$i,$date) = @_;

  my %info;
  $info{DATE} = $date->strftime('%Y-%m-%d');
  $info{GENRE} = "Podcast";

  # -- split the filename off the url -- #

  my $file = $config->{local} . "/" . $f->{subdir} . '/' .
             &local_file_from_url($i);
  $file =~ s/\.MP3$/.mp3/;

  return if $file =~ /\.m4v$/;   # Ignore m4v files.

  my $oggFile = $file;
  $oggFile =~ s/mp3$/ogg/;

  my ($testAndroidFileName, $testNewFileName) = buildFileNames($oggFile, $f, $info{DATE});

  # -- first make sure we don't already have the file -- #
  return 1 if (-e $file or -e $oggFile or -e $testNewFileName or -e $testAndroidFileName
              or -e "/home/bkuhn/Files/Audio/Portable/Listened/$testAndroidFileName");
  print "$file, $oggFile, $testAndroidFileName, and $testNewFileName and /home/bkuhn/Files/Audio/Portable/Listened/$testAndroidFileName all didn't exist\n";
  # -- grab the file -- #
  system("/usr/bin/wget -N -O $file $i->{enclosure}{url}");
  die "wget failure: $!" unless ($? == 0);
  # -- change file info if desired -- #

  if ($file !~ /ogg$/) {
    my $newFile = $file;
    $newFile =~ s/mp3$/ogg/;
#    system("mpg321 $file -w - | oggenc -q $OGG_QUALITY -o $newFile -");
    system("/usr/bin/sox $file $newFile");
    die "Unable to mp3->ogg on $file to $newFile" unless ($? == 0);
    open(ID_MP3, "/usr/bin/id3v2 -l $file|") or die "unable to run: /usr/bin/id3v2 -l $file";
    my %mp3Data;
    while (my $line = <ID_MP3>) {
      chomp $line;
      if ($line =~ /^(TRCK|TIT2|TT2|TPE1|TALB|TRDA)[^:]*\s*:\s*(.+$)/) {
        $mp3Data{$1} = $2;
      }
    }
    close ID_MP3;
    my %map = (TITLE => 'TIT2', ARTIST => 'TPE1', ALBUM => 'TALB',
               TRACKNUMBER => 'TRCK', DATE => 'TRDA');
    foreach my $key (keys %map) {
      $info{$key} = $mp3Data{$map{$key}}
        if ( (not defined $info{$key}) and defined $mp3Data{$map{$key}});
      print "hoping to setting $key using $map{$key} by $mp3Data{$map{$key}}\n";
    }
    my %map2 = (TITLE => 'TT2', ARTIST => 'TP1', ALBUM => 'TAL', DATE => 'TYE');
    foreach my $key (keys %map2) {
      $info{$key} = $mp3Data{$map2{$key}}
        if ( ( (not defined $info{$key}) or $info{$key} =~ /^\s*$/) and defined $mp3Data{$map2{$key}});
      print "hoping to setting $key using $map2{$key} by $mp3Data{$map2{$key}}\n";
    }
    die "Unable to remove $file now that $oggFile is made" unless unlink($file) == 1;
    $file = $oggFile;
  } else {
    open(VORBIS_COMMENTS, "/usr/bin/vorbiscomment -l $file|") or
      die "unable to run: /usr/bin/vorbiscomment -l $file";
    while (my $line = <VORBIS_COMMENTS>) {
      chomp $line;
      die "Weird vorbis line: $line" unless $line =~ /^\s*([^=]*)\s*=\s*(.+)$/;
      $info{$1} = $2 unless defined $info{$1};
    }
    close VORBIS_COMMENTS;
  }

  my ($androidFile, $newFileName) = buildFileNames($file, $f, $info{DATE});
  rename($file, $newFileName) or die "Unable to rename $file to $newFileName: $!";
  $file = $newFileName;
  print NEW_LIST "$androidFile\n";
  print DOWNLOAD_LIST " File: $file";
  open(VORBIS_CHANGE,  "|/usr/bin/vorbiscomment -w $file") or
    die "unable to /usr/bin/vorbiscomment -w $file: $!";
  use Data::Dumper;
  print "info IS", Data::Dumper->Dump([\%info]);
  print "F IS", Data::Dumper->Dump([$f]);
  $info{TITLE} = $info{DATE} unless defined $info{TITLE};
  foreach my $key (keys %{$f}) {
    $info{"\U$key\E"} = $f->{$key} unless defined $info{"\U$key\E"};
  }
  foreach my $key ('TITLE', 'ARTIST', 'ALBUM') {
    if (defined $f->{"\L$key\E"}) {
      my $value = $date->strftime($f->{"\L$key\E"});
      $value =~ s!#T#!$info{TITLE}!i if defined $info{TITLE};
      $value =~ s!#N#!$info{TRACKNUMBER}!i if defined $info{TRACKNUMBER};
      $info{$key} = $value;
    }
  }
  foreach my $key (keys %info) {
    print VORBIS_CHANGE $key, '=', $info{$key}, "\n";
  }
  close VORBIS_CHANGE;
  print DOWNLOAD_LIST "\n\n";

#	$mp3->set_v2tag($id3v2);
  return 1;
}
#----------

sub local_file_from_url {
	my $i = shift;

	my ($file) = $i->{enclosure}{url} =~ m!.*/([^/]+)$!;

        $file =~ s/\s+/-/g;
	return $file;
}

#----------

sub handle_feed_rai {
	my ($f,$rss) = @_;

	# stupid XML::RAI and XML::RSS::Parser don't pass any extra args on 
	# to XML::Parser or XML::Expat, so we'll have to go around them

	my $xml = 
		XML::RAI::new(
			$parser->parse($rss->content,ProtocolEncoding=>"ISO-8859-1")
		);

#	my $xml = XML::RAI->parse($rss->content,ProtocolEncoding=>"ISO-8859-1");

	my $items = [];

	foreach my $item ( @{ $xml->items } ) {
		my $info = {};
		foreach my $t ('title','link','description','created') {
			$info->{ $t } = $item->$t;
		}

		warn "item: $info->{title}\n";
	}
}

package XML::RSS::Parser;

sub parse {
	my $class = shift;
	$class->rss_normalize($class->SUPER::parse(@_));
}

1;

